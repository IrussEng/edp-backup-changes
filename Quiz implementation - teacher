// QuizzesPage.tsx

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button, Card, Text, Modal, useModal, Row, Col, Spacer } from '@nextui-org/react';
import { FaPen, FaTrashAlt } from 'react-icons/fa';
import { BackendUrl } from "@/context/BackendUrl"; // Replace with your backend URL context

// Sample quizzes data (replace with actual data from your backend)
const sampleQuizzes = [
  { id: 1, title: "Science Quiz", category: "Science", duration: "15 min", questions: 12 },
  { id: 2, title: "Math Quiz", category: "Math", duration: "20 min", questions: 15 },
  { id: 3, title: "History Quiz", category: "History", duration: "10 min", questions: 8 },
];

export default function QuizzesPage() {
  const [quizzes, setQuizzes] = useState(sampleQuizzes);
  const [selectedQuiz, setSelectedQuiz] = useState(null);
  const { setVisible, bindings } = useModal();
  const navigate = useNavigate();

  // Fetch quizzes from your backend (replace this logic with an actual API call)
  const fetchQuizzes = async () => {
    try {
      // Example API call to get quizzes from the backend
      // const response = await fetch(`${BackendUrl}/quizzes`);
      // const data = await response.json();
      // setQuizzes(data);

      // For now, using the sample quizzes above:
      setQuizzes(sampleQuizzes);
    } catch (error) {
      console.error("Error fetching quizzes:", error);
    }
  };

  useEffect(() => {
    fetchQuizzes();
  }, []);

  const handleDeleteQuiz = (quizId: number) => {
    // Add logic to delete the quiz (replace with an actual API call)
    setQuizzes(quizzes.filter(quiz => quiz.id !== quizId));
  };

  const handleEditQuiz = (quiz: any) => {
    // Navigate to edit page
    navigate(`/teacherplatform/editQuiz/${quiz.id}`);
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">My Quizzes</h1>
      
      {/* Button to Create New Quiz */}
      <Button
        auto
        color="primary"
        className="mb-6"
        onClick={() => navigate('/teacherplatform/createQuiz')}
      >
        Create New Quiz
      </Button>

      {/* Quizzes List */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {quizzes.map(quiz => (
          <Card
            key={quiz.id}
            className="p-4 cursor-pointer border border-gray-300 shadow-lg"
            onClick={() => navigate(`/teacherplatform/quiz/${quiz.id}`)}
          >
            <Text h4 className="font-semibold">{quiz.title}</Text>
            <p>Category: {quiz.category}</p>
            <p>Duration: {quiz.duration}</p>
            <p>Questions: {quiz.questions}</p>

            <Row justify="space-between" align="center" className="mt-4">
              <Col>
                {/* Edit Button */}
                <Button
                  auto
                  icon={<FaPen />}
                  color="warning"
                  onClick={() => handleEditQuiz(quiz)}
                  className="w-full"
                >
                  Edit
                </Button>
              </Col>
              <Col>
                {/* Delete Button */}
                <Button
                  auto
                  icon={<FaTrashAlt />}
                  color="error"
                  onClick={() => handleDeleteQuiz(quiz.id)}
                  className="w-full"
                >
                  Delete
                </Button>
              </Col>
            </Row>
          </Card>
        ))}
      </div>
      
      {/* Modal for confirmation of deletion */}
      <Modal {...bindings}>
        <Modal.Header>
          <Text h3>Confirm Deletion</Text>
        </Modal.Header>
        <Modal.Body>
          <Text>Are you sure you want to delete this quiz?</Text>
        </Modal.Body>
        <Modal.Footer>
          <Button auto flat color="error" onClick={() => setVisible(false)}>
            Cancel
          </Button>
          <Button auto color="primary" onClick={() => handleDeleteQuiz(selectedQuiz)}>
            Confirm
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}




// QuizController.cs 

using Microsoft.AspNetCore.Mvc;
using BackendAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace BackendAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class QuizController : ControllerBase
    {
        private readonly MyDbContext _context;

        public QuizController(MyDbContext context)
        {
            _context = context;
        }

        // GET: api/Quiz
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Quiz>>> GetQuizzes()
        {
            return await _context.Quizzes.ToListAsync();
        }

        // GET: api/Quiz/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Quiz>> GetQuiz(int id)
        {
            var quiz = await _context.Quizzes.FindAsync(id);

            if (quiz == null)
            {
                return NotFound();
            }

            return quiz;
        }

        // POST: api/Quiz
        [HttpPost]
        public async Task<ActionResult<Quiz>> PostQuiz(Quiz quiz)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _context.Quizzes.Add(quiz);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetQuiz", new { id = quiz.QuizID }, quiz);
        }

        // PUT: api/Quiz/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutQuiz(int id, Quiz quiz)
        {
            if (id != quiz.QuizID)
            {
                return BadRequest();
            }

            _context.Entry(quiz).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!QuizExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Quiz/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteQuiz(int id)
        {
            var quiz = await _context.Quizzes.FindAsync(id);
            if (quiz == null)
            {
                return NotFound();
            }

            _context.Quizzes.Remove(quiz);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool QuizExists(int id)
        {
            return _context.Quizzes.Any(e => e.QuizID == id);
        }
    }
}




// Quiz.cs

public class Quiz
{
    public int QuizID { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public int CourseID { get; set; }
    public Course Course { get; set; }
    public List<Question> Questions { get; set; }
}




// QuizList.tsx
import { useEffect, useState } from 'react';
import { BackendUrl } from '@/context/BackendUrl';
import { useNavigate } from 'react-router-dom';

interface Quiz {
  quizID: number;
  title: string;
  description: string;
  courseID: number;
}

const QuizList = () => {
  const [quizzes, setQuizzes] = useState<Quiz[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchQuizzes = async () => {
      try {
        const response = await fetch(`${BackendUrl}/api/Quiz`);
        if (!response.ok) {
          throw new Error('Failed to fetch quizzes');
        }
        const data = await response.json();
        setQuizzes(data);
      } catch (error) {
        setError(error instanceof Error ? error.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchQuizzes();
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h1>Quizzes</h1>
      <ul>
        {quizzes.map((quiz) => (
          <li key={quiz.quizID}>
            {quiz.title} - {quiz.description}
            <button onClick={() => navigate(`/teacher/quizzes/edit/${quiz.quizID}`)}>Edit</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default QuizList;



// EditQuiz.tsx

import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { BackendUrl } from '@/context/BackendUrl';

const EditQuiz = () => {
  const { quizID } = useParams();
  const navigate = useNavigate();
  const [quiz, setQuiz] = useState(null);

  useEffect(() => {
    const fetchQuiz = async () => {
      const response = await fetch(`${BackendUrl}/api/Quiz/${quizID}`);
      const data = await response.json();
      setQuiz(data);
    };

    fetchQuiz();
  }, [quizID]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const response = await fetch(`${BackendUrl}/api/Quiz/${quizID}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(quiz),
    });
    if (response.ok) {
      navigate('/teacher/quizzes');
    }
  };

  if (!quiz) return <div>Loading quiz...</div>;

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Title</label>
        <input
          type="text"
          value={quiz.title}
          onChange={(e) => setQuiz({ ...quiz, title: e.target.value })}
        />
      </div>
      <div>
        <label>Description</label>
        <textarea
          value={quiz.description}
          onChange={(e) => setQuiz({ ...quiz, description: e.target.value })}
        />
      </div>
      <button type="submit">Save</button>
    </form>
  );
};

export default EditQuiz;



// CreateQuiz.tsx

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { BackendUrl } from '@/context/BackendUrl';

const CreateQuiz = () => {
  const [quiz, setQuiz] = useState({ title: '', description: '', courseID: 1 });
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const response = await fetch(`${BackendUrl}/api/Quiz`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(quiz),
    });
    if (response.ok) {
      navigate('/teacher/quizzes');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Title</label>
        <input
          type="text"
          value={quiz.title}
          onChange={(e) => setQuiz({ ...quiz, title: e.target.value })}
        />
      </div>
      <div>
        <label>Description</label>
        <textarea
          value={quiz.description}
          onChange={(e) => setQuiz({ ...quiz, description: e.target.value })}
        />
      </div>
      <button type="submit">Create Quiz</button>
    </form>
  );
};

export default CreateQuiz;


