// Before adding new code for educator name 

using Microsoft.AspNetCore.Mvc;
using BackendAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace BackendAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CourseController : ControllerBase
    {
        private readonly MyDbContext _context;

        public CourseController(MyDbContext context)
        {
            _context = context;
        }

        // GET: api/Course
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Course>>> GetCourses()
        {
            return await _context.Courses
                .Include(c => c.Educator)
                .Include(c => c.Lessons)
                .Include(c => c.Tests)
                .ToListAsync();
        }

        // GET: api/Course/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Course>> GetCourse(int id)
        {
            var course = await _context.Courses
                .Include(c => c.Educator)
                .Include(c => c.Lessons)
                .Include(c => c.Tests)
                .FirstOrDefaultAsync(c => c.CourseID == id);

            if (course == null)
            {
                return NotFound();
            }

            return course;
        }

        // GET: api/Course/{courseId}/Students
        [HttpGet("{courseId}/Students")]
        public async Task<ActionResult<IEnumerable<Student>>> GetStudentsByCourse(int courseId)
        {
            // Fetch students enrolled in the course
            var students = await _context.StudentCourses
                .Where(sc => sc.CourseID == courseId) // Filter by courseId
                .Include(sc => sc.Student) // Include the Student entity
                .ThenInclude(s => s.User) // Include the User entity
                .Select(sc => sc.Student!) // Select the Student entity
                .ToListAsync();

            // Return an empty array if no students are found
            return Ok(students ?? new List<Student>());
        }
        // GET: api/Course/ByEducator/5
        [HttpGet("ByEducator/{educatorId}")]
        public async Task<IActionResult> GetCoursesByEducator(int educatorId)
        {
            var courses = await _context.Courses
                .Where(c => c.EducatorID == educatorId)
                .ToListAsync();
            return Ok(courses);
        }

        // POST: api/Course
        [HttpPost]
        public async Task<ActionResult<Course>> PostCourse(Course course)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _context.Courses.Add(course);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetCourse", new { id = course.CourseID }, course);
        }

        // PUT: api/Course/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCourse(int id, Course course)
        {
            if (id != course.CourseID)
            {
                return BadRequest();
            }

            _context.Entry(course).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CourseExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // PATCH: api/Course/5/approval-status
        [HttpPatch("{id}/approval-status")]
        public async Task<IActionResult> UpdateApprovalStatus(int id, [FromBody] UpdateApprovalStatusRequest request)
        {
            var course = await _context.Courses.FindAsync(id);
            if (course == null)
            {
                return NotFound();
            }

            // Validate the new status
            if (request.ApprovalStatus != "Approved" && request.ApprovalStatus != "Rejected" && request.ApprovalStatus != "Pending")
            {
                return BadRequest("Invalid approval status. Allowed values are 'Approved', 'Rejected', or 'Pending'.");
            }

            // Update the approval status
            course.ApprovalStatus = request.ApprovalStatus;

            // Optionally, update remarks if provided
            if (!string.IsNullOrEmpty(request.Remarks))
            {
                course.Remarks = request.Remarks;
            }

            _context.Entry(course).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CourseExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // PUT: api/Course/EnrollStudent
        [HttpPut("EnrollStudent")]
        public async Task<IActionResult> UpdateStudentCourse([FromBody] UpdateCourseRequest request)
        {
            var student = await _context.Students.FirstOrDefaultAsync(s => s.UserID == request.UserID);
            if (student == null)
            {
                return NotFound("Student not found.");
            }

            var course = await _context.Courses.FirstOrDefaultAsync(c => c.CourseID == request.CourseID);
            if (course == null)
            {
                return NotFound("Course not found.");
            }

            // Check if the course has reached its maximum participants
            if (course.StudentsEnrolled >= course.MaxParticipants)
            {
                return BadRequest("Course has reached its maximum number of participants.");
            }

            // Check if the student is already enrolled in the course
            var existingEnrollment = await _context.StudentCourses
                .FirstOrDefaultAsync(sc => sc.StudentID == student.StudentID && sc.CourseID == course.CourseID);

            if (existingEnrollment != null)
            {
                return BadRequest("Student is already enrolled in this course.");
            }

            // Create a new enrollment
            var studentCourse = new StudentCourse
            {
                StudentID = student.StudentID,
                CourseID = course.CourseID,
                EnrollmentDate = DateTime.UtcNow
            };

            _context.StudentCourses.Add(studentCourse);

            // Increment the studentsEnrolled count for the course
            course.StudentsEnrolled += 1;

            // Set the StudentID property of the Course entity
            course.StudentID = student.StudentID;

            _context.Entry(course).State = EntityState.Modified;

            await _context.SaveChangesAsync();

            // Return the updated course data
            return Ok(course);
        }

        // GET: api/Course/EnrolledCourses?studentId={studentId}
        [HttpGet("EnrolledCourses")]
        public async Task<ActionResult<IEnumerable<Course>>> GetEnrolledCourses(int studentId)
        {
            var courses = await _context.StudentCourses
                .Where(sc => sc.StudentID == studentId) // Filter by studentId
                .Include(sc => sc.Course) // Include the Course entity
                .ThenInclude(c => c.Lessons) // Include Lessons for the course
                .ThenInclude(l => l.Attendances) // Include Attendance for each lesson
                .Include(sc => sc.Course)
                .ThenInclude(c => c.Tests) // Include Tests for the course
                .Select(sc => sc.Course) // Select the Course entity
                .ToListAsync();

            if (courses == null || !courses.Any())
            {
                return Ok(new List<Course>()); // Return an empty list if no courses are found
            }

            return Ok(courses);
        }

        // DELETE: api/Course/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCourse(int id)
        {
            var course = await _context.Courses.FindAsync(id);
            if (course == null)
            {
                return NotFound();
            }

            _context.Courses.Remove(course);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool CourseExists(int id)
        {
            return _context.Courses.Any(e => e.CourseID == id);
        }

        // Nested class for updating approval status
        public class UpdateApprovalStatusRequest
        {
            public string ApprovalStatus { get; set; } = string.Empty;
            public string? Remarks { get; set; }
        }

        // Nested class for updating course enrollment
        public class UpdateCourseRequest
        {
            public int UserID { get; set; }
            public int CourseID { get; set; }
        }
    }
}
